{% extends 'back.html.twig' %}
{% block title %}Dashboard{% endblock %}
{% block body %}
{% block stylesheets %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" integrity="sha512-/zs32ZEJh+/EO2N1b0PEdoA10JkdC3zJ8L5FTiQu82LR9S/rOQNfQN7U59U9BC12swNeRAz3HSzIL2vpp4fv3w==" crossorigin="anonymous">
         <style>
         
        .adherents-rectangle, .coachs-rectangle {
            width: 200px;
            height: 100px;
            background-color: #ff8000;
            margin: 0 auto 20px auto; /* Center the rectangle horizontally and add bottom margin */
            padding: 10px;
            text-align: center; /* Center the text inside the rectangle */
        }

        .adherents-rectangle h3::before {
            font-family: 'Font Awesome 5 Free';
            content: '\f007'; /* Unicode for user icon */
            margin-right: 10px;
        }

        .coachs-rectangle h3::before {
            font-family: 'Font Awesome 5 Free';
            content: '\f0c0'; /* Unicode for users icon */
            margin-right: 10px;
        }
    </style>



    <div class="container">
        <center>
            <h1>Dashboard</h1>
        </center>
         <div class="row justify-content-center"> <!-- Center the row -->
            <div class="col-md-3">
                <div class="adherents-rectangle">
                    <h3></h3> <!-- Leave the heading empty -->
                    <p>{{ nbAdherents }}</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="coachs-rectangle">
                    <h3></h3> <!-- Leave the heading empty -->
                    <p>{{ nbCoachs }}</p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <canvas id="profitsChart" width="400" height="200"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="revenuesChart" width="400" height="200"></canvas>
            </div>
              <pre>{{ data | json_encode(constant('JSON_PRETTY_PRINT')) }}</pre>
        </div>
        <div class="container">
        <h1 class="text-center">Stock Statistics</h1>

        <div class="row mt-5">
            <div class="col-md-6">
                <canvas id="priceChart" width="400" height="200"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="volumeChart" width="400" height="200"></canvas>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-md-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Open</th>
                            <th>High</th>
                            <th>Low</th>
                            <th>Close</th>
                            <th>Volume</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for date, info in stockData %}
                            <tr>
                                <td>{{ date }}</td>
                                <td>{{ info['1. open'] }}</td>
                                <td>{{ info['2. high'] }}</td>
                                <td>{{ info['3. low'] }}</td>
                                <td>{{ info['4. close'] }}</td>
                                <td>{{ info['5. volume'] }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    </div>


{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha512-s+xg36jbIujB2S2VKfpGmlC3T5V2TF3lY48DX7u2r9XzGzgPsa6wTpOQA7J9iffvdeBN0q9tKzRxVxw1JviZPg==" crossorigin="anonymous"></script>
    <script>
        // Obtenez les données des statistiques des profits passées depuis le contrôleur
        let dates = {{ dates|raw  }};
        let profits = {{ profits|raw }};
        let revenuesAbonnements = {{ revenuesAbonnements|raw }};
        let revenuesProduits = {{ revenuesProduits|raw}};
        
        // Créez un nouveau graphique pour les profits
        let profitsChart = document.getElementById('profitsChart').getContext('2d');
        let profitsChartInstance = new Chart(profitsChart, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Profits',
                    data: profits,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

        // Créez un nouveau graphique pour les revenus
        let revenuesChart = document.getElementById('revenuesChart').getContext('2d');
        let revenuesChartInstance = new Chart(revenuesChart, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Revenues d\'abonnements',
                    data: revenuesAbonnements,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }, {
                    label: 'Revenues de produits',
                    data: revenuesProduits,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
            });
            
            console.log(dates);
    console.log(profits);
        console.log(data);
       
        
    </script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>

    {# JavaScript section to populate and configure charts #}
   <script>
    // Data obtained from Alpha Vantage API
    let stockData = {{ data | raw | json_encode | raw }};
    
    // Extract dates and closing prices for the chart
    let dates = Object.keys(stockData['Time Series (5min)']).reverse();
    let closingPrices = dates.map(date => parseFloat(stockData['Time Series (5min)'][date]['4. close']));
    
    // Configure the stock price chart
    let stockChartCanvas = document.getElementById('priceChart').getContext('2d');
    let stockChart = new Chart(stockChartCanvas, {
        type: 'line',
        data: {
            labels: dates,
            datasets: [{
                label: 'Closing Price (USD)',
                data: closingPrices,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: false
                    }
                }]
            }
        }
    });
    
    // Optional: Log data for debugging
    console.log(stockData); // View the retrieved data in the console
</script>


{% endblock %}
{% endblock %}
{% endblock %}